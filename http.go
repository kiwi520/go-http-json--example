package main

import (
	"fmt"
	"html/template"
	"net/http"
	"encoding/json"
	"io/ioutil"
	"log"
	"strings"
)

func sayhelloName(w http.ResponseWriter, r *http.Request) {
	r.ParseForm()       //解析参数，默认是不会解析的
	fmt.Println(r.Form) //这些信息是输出到服务器端的打印信息
	fmt.Println("path", r.URL.Path)
	fmt.Println("scheme", r.URL.Scheme)
	fmt.Println(r.Form["url_long"])
	for k, v := range r.Form {
		fmt.Println("key:", k)
		fmt.Println("val:", strings.Join(v, ""))
	}
	fmt.Fprintf(w, "我擦,跑起来了")
}

func login(w http.ResponseWriter, r *http.Request) {
	fmt.Println("method:", r.Method) //获取请求的方法
	if r.Method == "GET" {
		t, _ := template.ParseFiles("./login.gtpl")
		log.Println(t.Execute(w, nil))
	} else {
		r.ParseForm()
		//请求的是登录数据，那么执行登录的逻辑判断
		fmt.Println("username:", r.Form["username"])
		fmt.Println("password:", r.Form["password"])
	}
}

func httpDo(http.ResponseWriter, *http.Request) {
	var b = `{"opr": "listusr","data": {"start": 0, "limit": 25,"filter": {"filterType": "all","id": 100,"gid": -1,"type": 888},"search": "","sort": "onlineTime","direction": "DESC","searchValue": "","is_deposit": false,"is_central_area": false}}`

	client := &http.Client{}

	req, err := http.NewRequest("POST", "https://123.132.229.198:4443/index.php/sys_runstat", strings.NewReader(string(b)))

	if err != nil {
		// handle error
	}

	req.Header.Set("Accept", "*/*")
	req.Header.Set("Accept-Encoding", "gzip,deflate, br")
	req.Header.Set("Accept-Language", "zh-CN,zh;q=0.8,fi;q=0.6,en;q=0.4")
	req.Header.Set("Connection", "keep-alive")
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Host", "123.132.229.130:4443")
	req.Header.Set("X-Requested-With", "XMLHttpRequest")
	req.Header.Set("token", "9d44be4df3d35c2bef9ff39eb3d76a0f")
	resp, err := client.Do(req)

	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		// handle error
	}

	fmt.Println(string(body))
}

func httptc() {
	var b = `"1=1"`

	client := &http.Client{}

	req, err := http.NewRequest("POST", "http://123.132.229.198:60009/api/Park/GetByFunc", strings.NewReader(b))
	if err != nil {
		// handle error
	}

	req.Header.Set("Content-Type", "application/json;charset=utf-8")
	// req.Header.Set("Host","123.132.229.198:60009")
	resp, err := client.Do(req)

	defer resp.Body.Close()

	//body, err := ioutil.ReadAll(resp.Body)
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		// handle error
	}
	// fmt.Println(string(body))
    fmt.Printf(string(body))

	type State struct {
		IsSucess       bool        `json:"IsSucess"`
		IsError        bool        `json:"IsError"`
		Code           int         `json:"Code"`
		RecordAffected int         `json:"RecordAffected"`
		Describe       interface{} `json:"Describe"`
	}
	type Models []struct {
		ID       int    `json:"ID"`
		Name     string `json:"Name"`
		LotCount int    `json:"LotCount"`
		LotFree  int    `json:"LotFree"`
		ParentNo string `json:"ParentNo"`
		Remark   string `json:"Remark"`
		Gid      string `json:"Gid"`
		Rid      string `json:"Rid"`
	}
	type Model struct {
		ID       int    `json:"ID"`
		Name     string `json:"Name"`
		LotCount int    `json:"LotCount"`
		LotFree  int    `json:"LotFree"`
		ParentNo string `json:"ParentNo"`
		Remark   string `json:"Remark"`
		Gid      string `json:"Gid"`
		Rid      string `json:"Rid"`
	}
	type AutoGenerated struct {
		State  State
		Models Models
		Model  Model
	}

	var myInfo AutoGenerated


	json.Unmarshal([]byte(body), &myInfo)

	fmt.Printf("%+v\n",myInfo)
   
 //    fmt.Printf("%+v\n", myInfo.State)
 //    fmt.Printf("%+v\n", myInfo.Models[0].Gid)
 //    for  k,v :=   range myInfo.Models[0]{
 //            fmt.Printf("%+v\n",v)
 //    }
}

func main() {

	httptc()

}